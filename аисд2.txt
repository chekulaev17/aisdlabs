#include <iostream>
#include <stdexcept>
#include <random>
#include <unordered_set>
#include <cmath>

template <typename T>
struct Node {
    T data;
    Node* next;
    Node(T value) : data(value), next(nullptr) {}
};

template <typename T>
class LinkedList {
private:
    Node<T>* head;
    Node<T>* tail;
    size_t size;
 void copy_list(const LinkedList& other) {
        if (other.size == 0) return;
        Node<T>* current = other.head;
        do {
            push_tail(current->data);
            current = current->next;
        } while (current != other.head);
    }

    void clear_list() {
        while (size > 0) {
            pop_head();
        }
    }
public:
    LinkedList() : head(nullptr), tail(nullptr), size(0) {}

    LinkedList(const LinkedList& other) : head(nullptr), tail(nullptr), size(0) {
        copy_list(other);
    }

    LinkedList(size_t n, T min_val, T max_val) : head(nullptr), tail(nullptr), size(0) {
        std::mt19937 gen(42);
        std::uniform_int_distribution<T> dist(min_val, max_val);
        for (size_t i = 0; i < n; ++i) {
            push_tail(dist(gen));
        }
    }

    ~LinkedList() {
        clear_list();
    }

    LinkedList& operator=(const LinkedList& other) {
        if (this != &other) {
            clear_list();
            copy_list(other);
        }
        return *this;
    }
