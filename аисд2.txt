#include <iostream>
#include <stdexcept>
#include <random>
#include <unordered_set>
#include <cmath>

template <typename T>
struct Node {
    T data;
    Node* next;
    Node(T value) : data(value), next(nullptr) {}
};

template <typename T>
class LinkedList {
private:
    Node<T>* head;
    Node<T>* tail;
    size_t size;
 void copy_list(const LinkedList& other) {
        if (other.size == 0) return;
        Node<T>* current = other.head;
        do {
            push_tail(current->data);
            current = current->next;
        } while (current != other.head);
    }

    void clear_list() {
        while (size > 0) {
            pop_head();
        }
    }
public:
    LinkedList() : head(nullptr), tail(nullptr), size(0) {}

    LinkedList(const LinkedList& other) : head(nullptr), tail(nullptr), size(0) {
        copy_list(other);
    }

    LinkedList(size_t n, T min_val, T max_val) : head(nullptr), tail(nullptr), size(0) {
        std::mt19937 gen(42);
        std::uniform_int_distribution<T> dist(min_val, max_val);
        for (size_t i = 0; i < n; ++i) {
            push_tail(dist(gen));
        }
    }

    ~LinkedList() {
        clear_list();
    }

    LinkedList& operator=(const LinkedList& other) {
        if (this != &other) {
            clear_list();
            copy_list(other);
        }
        return *this;
    }
  void push_tail(T value) {
        Node<T>* new_node = new Node<T>(value);
        if (!tail) {
            head = tail = new_node;
            new_node->next = head;
        } else {
            new_node->next = head;
            tail->next = new_node;
            tail = new_node;
        }
        ++size;
    }

    void push_head(T value) {
        Node<T>* new_node = new Node<T>(value);
        if (!head) {
            head = tail = new_node;
            new_node->next = head;
        } else {
            new_node->next = head;
            head = new_node;
            tail->next = head;
        }
        ++size;
    }
void pop_head() {
        if (size == 0) throw std::underflow_error("List is empty.");
        Node<T>* temp = head;
        if (head == tail) {
            head = tail = nullptr;
        } else {
            head = head->next;
            tail->next = head;
        }
        delete temp;
        --size;
    }

    void pop_tail() {
        if (size == 0) throw std::underflow_error("List is empty.");
        if (head == tail) {
            delete head;
            head = tail = nullptr;
        } else {
            Node<T>* current = head;
            while (current->next != tail) {
                current = current->next;
            }
            delete tail;
            tail = current;
            tail->next = head;
        }
        --size;
    }
void delete_node(T value) {
        while (size > 0 && head->data == value) {
            pop_head();
        }
        if (size == 0) return;
        Node<T>* current = head;
        do {
            if (current->next->data == value) {
                Node<T>* temp = current->next;
                current->next = temp->next;
                if (temp == tail) {
                    tail = current;
                }
                delete temp;
                --size;
            } else {
                current = current->next;
            }
        } while (current != tail);
    }
  T operator[](size_t index) const {
        if (index >= size) throw std::out_of_range("Index out of range.");
        Node<T>* current = head;
        for (size_t i = 0; i < index; ++i) {
            current = current->next;
        }
        return current->data;
    }

    T& operator[](size_t index) {
        if (index >= size) throw std::out_of_range("Index out of range.");
        Node<T>* current = head;
        for (size_t i = 0; i < index; ++i) {
            current = current->next;
        }
        return current->data;
    }

    size_t get_size() const {
        return size;
    }
 void push_head(const LinkedList& other) {
        if (!other.head) return;

        LinkedList<T> temp;

        Node<T>* current = other.head;
        do {
            temp.push_tail(current->data);
            current = current->next;
        } while (current != other.head);

        current = this->head;
        if (current) {
            do {
                temp.push_tail(current->data);
                current = current->next;
            } while (current != this->head);
        }

        *this = temp;
    }

    void push_tail(const LinkedList& other) {
        Node<T>* current = other.head;
        if (!current) return;
        do {
            push_tail(current->data);
            current = current->next;
        } while (current != other.head);
    }
   friend std::ostream& operator<<(std::ostream& os, const LinkedList& list) {
        if (list.size == 0) return os;
        Node<T>* current = list.head;
        do {
            os << current->data << " ";
            current = current->next;
        } while (current != list.head);
        return os;
    }
};
#include "LinkedList.h"
bool is_happy(int number) {
    std::unordered_set<int> seen;
    while (number != 1 && seen.find(number) == seen.end()) {
        seen.insert(number);
        int sum = 0;
        while (number > 0) {
            int digit = number % 10;
            sum += digit * digit;
            number /= 10;
        }
        number = sum;
    }
    return number == 1;
}
void find_unhappy_numbers(int N) {
    LinkedList<int> numbers;
    for (int i = 1; i <= N; ++i) {
        numbers.push_tail(i);
    }
    std::cout << "Unhappy numbers: ";
    for (size_t i = 0; i < numbers.get_size(); ++i) {
        if (!is_happy(numbers[i])) {
            std::cout << numbers[i] << " ";
        }
    }
    std::cout << std::endl;
}
double evaluate_polynomial(const LinkedList<std::pair<int, double>>& poly, double x) {
    double result = 0.0;
    for (size_t i = 0; i < poly.get_size(); ++i) {
        auto term = poly[i];
        result += term.second * std::pow(x, term.first);
    }
    return result;
}
