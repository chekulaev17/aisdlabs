#include <iostream>
#include <random>
#include <algorithm>
#include <limits>
#include <stdexcept>
#include <cmath>
#include <type_traits>

template <typename T>
class GrayscaleImage {
    static_assert(
        std::is_same<T, bool>::value || std::is_same<T, char>::value ||
        std::is_same<T, float>::value || std::is_same<T, short>::value,
        "Unsupported type. Supported types are: bool, char, float, short."
        );

private:
    T* data;
    size_t width;
    size_t height;

    static T invertValue(const T& value) {
        if constexpr (std::is_same_v<T, bool>) {
            return !value;
        }
        else if constexpr (std::is_same_v<T, char> || std::is_same_v<T, short> || std::is_same_v<T, float>) {
            return value * static_cast<T>(-1);
        }
        else {
            static_assert(!std::is_same_v<T, T>, "Unsupported type for inversion");
        }
    }


    T getRandomValue() {
        static std::mt19937 generator(std::random_device{}());
        if constexpr (std::is_same<T, bool>::value) {
            return std::uniform_int_distribution<>(0, 1)(generator) == 1;
        }
        else if constexpr (std::is_same<T, char>::value) {
            return std::uniform_int_distribution<>(std::numeric_limits<char>::min(), std::numeric_limits<char>::max())(generator);
        }
        else if constexpr (std::is_same<T, short>::value) {
            return std::uniform_int_distribution<>(std::numeric_limits<short>::min(), std::numeric_limits<short>::max())(generator);
        }
        else if constexpr (std::is_same<T, float>::value) {
            return std::uniform_real_distribution<>(0.0f, 1.0f)(generator);
        }
    }

public:
    GrayscaleImage(size_t width, size_t height, bool random_fill = false)
        : width(width), height(height), data(new T[width * height]) {
        for (size_t i = 0; i < width * height; ++i) {
            data[i] = random_fill ? getRandomValue() : T{};
        }
    }

    GrayscaleImage(const GrayscaleImage& other)
        : width(other.width), height(other.height), data(new T[other.width * other.height]) {
        std::copy(other.data, other.data + width * height, data);
    }

    GrayscaleImage& operator=(const GrayscaleImage& other) {
        if (this != &other) {
            delete[] data;
            width = other.width;
            height = other.height;
            data = new T[width * height];
            std::copy(other.data, other.data + width * height, data);
        }
        return *this;
    }

    ~GrayscaleImage() {
        delete[] data;
    }

    T& operator()(size_t x, size_t y) {
        if (x >= width || y >= height) {
            throw std::out_of_range("Index out of bounds");
        }
        return data[y * width + x];
    }

    const T& operator()(size_t x, size_t y) const {
        if (x >= width || y >= height) {
            throw std::out_of_range("Index out of bounds");
        }
        return data[y * width + x];
    }

  
    GrayscaleImage operator+(const GrayscaleImage& other) const {
        size_t result_width = std::max(width, other.width);
        size_t result_height = std::max(height, other.height);

        GrayscaleImage result(result_width, result_height);

        for (size_t y = 0; y < result_height; ++y) {
            for (size_t x = 0; x < result_width; ++x) {
                T value_this = (x < width && y < height) ? (*this)(x, y) : T{};
                T value_other = (x < other.width && y < other.height) ? other(x, y) : T{};

                T max_value = std::numeric_limits<T>::max();
                if (value_this > max_value - value_other) {
                    result(x, y) = max_value;
                }
                else {
                    result(x, y) = value_this + value_other;
                }
            }
        }
        return result;
    }

    
    GrayscaleImage operator-(const GrayscaleImage& other) const {
        size_t result_width = std::max(width, other.width);
        size_t result_height = std::max(height, other.height);

        GrayscaleImage result(result_width, result_height);

        for (size_t y = 0; y < result_height; ++y) {
            for (size_t x = 0; x < result_width; ++x) {
                T value_this = (x < width && y < height) ? (*this)(x, y) : T{};
                T value_other = (x < other.width && y < other.height) ? other(x, y) : T{};

                T min_value = std::numeric_limits<T>::min();
                if (value_this < min_value + value_other) {
                    result(x, y) = min_value;
                }
                else {
                    result(x, y) = value_this - value_other;
                }
            }
        }
        return result;
    }

    GrayscaleImage operator*(const GrayscaleImage& other) const {
        if (width != other.width || height != other.height) {
            throw std::invalid_argument("Размеры не совпадают для умножения");
        }
        GrayscaleImage result(width, height);

        for (size_t i = 0; i < width * height; ++i) {
            T mult = data[i] * other.data[i];

            if (data[i] != 0 && other.data[i] > std::numeric_limits<T>::max() / data[i]) {
                mult = std::numeric_limits<T>::max();
            }
            else if (data[i] != 0 && other.data[i] < std::numeric_limits<T>::min() / data[i]) {
                mult = std::numeric_limits<T>::min();
            }

            result.data[i] = mult;
        }
        return result;
    }

    GrayscaleImage operator+(T value) const {
        GrayscaleImage result(width, height);
        T max_value = std::numeric_limits<T>::max();

        for (size_t i = 0; i < width * height; ++i) {
            if (data[i] > max_value - value) {
                result.data[i] = max_value;
            }
            else {
                result.data[i] = data[i] + value;
            }
        }
        return result;
    }

    GrayscaleImage operator*(T value) const {
        GrayscaleImage result(width, height);
        T max_value = std::numeric_limits<T>::max();

        for (size_t i = 0; i < width * height; ++i) {
            if (data[i] != 0 && value > max_value / data[i]) {
                result.data[i] = max_value;
            }
            else {
                result.data[i] = data[i] * value;
            }
        }
        return result;
    }

    GrayscaleImage operator!() const {
        GrayscaleImage result(width, height);
        for (size_t i = 0; i < width * height; ++i) {
            result.data[i] = invertValue(data[i]);
        }
        return result;
    }

    bool operator==(const GrayscaleImage& other) const {
        if (width != other.width || height != other.height) return false;
        for (size_t i = 0; i < width * height; ++i) {
            if (data[i] != other.data[i]) return false;
        }
        return true;
    }

    bool operator!=(const GrayscaleImage& other) const {
        return !(*this == other);
    }

    float fillRatio() const {
        size_t filled_count = std::count_if(data, data + width * height, [](T val) { return val != T{}; });
        return static_cast<float>(filled_count) / (width * height);
    }

    void drawCircle(size_t x_center, size_t y_center, size_t radius, T fill_value) {
        for (size_t y = 0; y < height; ++y) {
            for (size_t x = 0; x < width; ++x) {
                size_t dx = x - x_center;
                size_t dy = y - y_center;
                if (dx * dx + dy * dy <= radius * radius) {
                    (*this)(x, y) = fill_value;
                }
            }
        }
    }

    friend std::ostream& operator<<(std::ostream& os, const GrayscaleImage& img) {
        for (size_t y = 0; y < img.height; ++y) {
            for (size_t x = 0; x < img.width; ++x) {
                os << static_cast<int>(img(x, y)) << " ";
            }
            os << "\n";
        }
        return os;
    }
}; 


#include "GrayscaleImage.h"
#include <iostream>

int main() {
    try {
       
        GrayscaleImage<char> img1(5, 5, true); 
        GrayscaleImage<char> img2(5, 5, true);

        img1.drawCircle(2, 2, 2, 10);
        auto sum = img1 + img2;
        auto difference = img1 - img2;
        auto product = img1 * img2;
        auto img_plus = img1 + true;
        auto img_prod = img1 * false;
        auto inverted_img = !img2;

        std::cout << "Image 1:\n" << img1;
        std::cout << "\nImage 2:\n" << img2;
        std::cout << "\nSum of Image 1 and Image 2:\n" << sum;
        std::cout << "\nDifference of Image 1 and Image 2:\n" << difference;
        std::cout << "\nProduct:\n" << product;
        std::cout << "\nImage  + true:\n" << img_plus;
        std::cout << "\nImage  * false:\n" << img_prod;
        std::cout << "\nInverted Image :\n" << inverted_img;
        std::cout << "\nFill Ratio of Image : " << img1.fillRatio() << "\n";

    }
    catch (const std::invalid_argument& e) {
        std::cerr << "Invalid argument error: " << e.what() << "\n";
    }
    catch (const std::out_of_range& e) {
        std::cerr << "Out of range error: " << e.what() << "\n";
    }
    catch (const std::exception& e) {
        std::cerr << "General error: " << e.what() << "\n";
    }

    return 0;
}
